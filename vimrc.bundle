" This code is copied from https://github.com/VundleVim/Vundle.vim

" Plugins {{{

  " Init Vundle {{{
    set nocompatible              " be iMproved, required
    filetype off                  " required

    " set the runtime path to include Vundle and initialize
    set rtp+=~/.vim/bundle/Vundle.vim
    call vundle#begin()
    " alternatively, pass a path where Vundle should install plugins
    " call vundle#begin('~/some/path/here')

    " let Vundle manage Vundle, required
    Plugin 'VundleVim/Vundle.vim'

    " Plugin Samples {{{
      " The following are examples of different formats supported.
      " Keep Plugin commands between vundle#begin/end.
      " plugin on GitHub repo
      " Plugin 'tpope/vim-fugitive'

      " plugin from http://vim-scripts.org/vim/scripts.html
      " Plugin 'L9'

      " Git plugin not hosted on GitHub
      " Plugin 'git://git.wincent.com/command-t.git'

      " git repos on your local machine (i.e. when working on your own plugin)
      " Plugin 'file:///home/gmarik/path/to/plugin'

      " The sparkup vim script is in a subdirectory of this repo called vim.
      " Pass the path to set the runtimepath properly.
      " Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}

      " Avoid a name conflict with L9
      " Plugin 'user/L9', {'name': 'newL9'}
    " Plugin Samples }}}
  " Init Vundle }}}

" All of your Plugins must be added after this

Plugin 'tpope/vim-sensible'
Plugin 'bling/vim-airline'
Plugin 'nanotech/jellybeans.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'airblade/vim-gitgutter'
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'tpope/vim-unimpaired'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-jdaddy'
Plugin 'tpope/vim-endwise'
Plugin 'vim-ruby/vim-ruby'
Plugin 'kien/ctrlp.vim'
Plugin 'scrooloose/syntastic'
Plugin 'bronson/vim-visual-star-search'
Plugin 'sjl/gundo.vim'
Plugin 'maxbrunsfeld/vim-yankstack'
Plugin 'kana/vim-textobj-user'
Plugin 'kana/vim-textobj-datetime'
Plugin 'kana/vim-textobj-fold'
Plugin 'kana/vim-textobj-line'
Plugin 'beloglazov/vim-textobj-quotes'
Plugin 'mattn/vim-textobj-url'
Plugin 'tek/vim-textobj-ruby'
Plugin 'tpope/vim-projectionist'
Plugin 'tpope/vim-rake'
Plugin 'tpope/vim-bundler'
Plugin 'tpope/vim-commentary'
Plugin 'kshenoy/vim-signature'
Plugin 'Shougo/unite.vim'
Plugin 'Shougo/vimproc'
Plugin 'Shougo/unite-outline'
Plugin 'Shougo/neomru.vim'
Plugin 'Shougo/unite-session'
Plugin 'Shougo/neoyank.vim'
Plugin 'Shougo/unite-help'
Plugin 'tsukkee/unite-tag'
Plugin 'osyo-manga/unite-quickfix'
Plugin 'ujihisa/unite-colorscheme'
Plugin 'ekalinin/Dockerfile.vim'
Plugin 'tpope/vim-vividchalk'
Plugin 'ap/vim-css-color'
Plugin 'NLKNguyen/papercolor-theme'
Plugin 'gerw/vim-HiLinkTrace'

" All of your Plugins must be added before this

  " Finalize Vundle {{{
    call vundle#end()            " required
    filetype plugin indent on    " required
    " To ignore plugin indent changes, instead use:
    " filetype plugin on

    " Brief help
    " :PluginList       - lists configured plugins
    " :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
    " :PluginSearch foo - searches for foo; append `!` to refresh local cache
    " :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
    "
    " see :h vundle for more details or wiki for FAQ
    " Put your non-Plugin stuff after this line
  " Finalize Vundle }}}

" Plugins }}}

" Yankstack {{{
    " This needs to happen before other mappings involving y, d, c, etc
    call yankstack#setup()

    nmap <leader>o <Plug>yankstack_substitute_older_paste
    nmap <leader>i <Plug>yankstack_substitute_newer_paste
" }}}

" Set colors {{{
    set t_Co=256
    set background=dark
    let g:jellybeans_overrides = {
        \ 'markdownItalic': {
        \   'guifg': 'cf6a4c',
        \   'guibg': '',
        \   'ctermfg': 'Black',
        \   'ctermbg': 'Yellow',
        \   'attr': '',
        \ },
        \ 'markdownBold': {
        \   'guifg': 'cf6a4c',
        \   'guibg': '',
        \   'ctermfg': 'Black',
        \   'ctermbg': 'Red',
        \   'attr': 'bold',
        \ }
        \}

    colorscheme jellybeans
    " colorscheme PaperColor
" Set colors }}}

" Airline Config {{{
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#show_buffers = 1

    if !exists('g:airline_symbols')
        let g:airline_symbols = {}
    endif

    let g:airline_left_sep = ''
    let g:airline_right_sep = ''

    " unicode symbols
    let g:airline_symbols.linenr = '␤'
    let g:airline_symbols.branch = '⎇'
    let g:airline_symbols.readonly = 'RO'
" Airline Config }}}

" Fugitive Config {{{
    " Delete fugitive buffers so that they don't pollute buffers
    autocmd BufReadPost fugitive://* set bufhidden=delete

    " .. to go up to the parent dir
    autocmd User fugitive
      \ if fugitive#buffer().type() =~# '^\%(tree\|blob\)$' |
      \   nnoremap <buffer> .. :edit %:h<CR> |
      \ endif

    nnoremap <silent> <leader>gs :Gstatus<CR>
    nnoremap <silent> <leader>gd :Gvdiff<CR>
    nnoremap <silent> <leader>gc :Gcommit<CR>
    nnoremap <silent> <leader>gb :Gblame<CR>
    nnoremap <silent> <leader>gl :Glog<CR>
" Fugitive Config }}}

" NERDTree {{{
    nmap <leader>f :NERDTreeTabsToggle<cr>
    nmap <leader>F :NERDTreeFind<cr>

    let NERDTreeQuitOnOpen=1
    let g:NERDTreeChDirMode=2
    let NERDTreeShowBookmarks=1
    let NERDTreeHighlightCursorline=1
    let NERDTreeIgnore = ['.swp', 'pkg']
" }}}

" Git Gutter Settings {{{
    let g:gitgutter_max_signs = 1000
" }}}

" CtrlP Mappings {{{
    let g:ctrlp_working_path_mode = 2
    let g:ctrlp_by_filename = 1
    let g:ctrlp_max_files = 600
    let g:ctrlp_max_depth = 5

    nmap <leader>p :CtrlP<CR>
    let g:ctrlp_map = ''
    let g:ctrlp_cmd = 'CtrlP'
    let g:ctrlp_match_window = 'results:100'

    let g:ctrlp_custom_ignore = {
      \ 'dir':  '\v[\/]\.(git|hg|svn)$',
      \ 'file': '\v\.(exe|so|dll)$',
      \ 'link': 'some_bad_symbolic_links',
      \ }
" }}}

" Syntastic Mappings {{{
    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 1
    let g:syntastic_check_on_open = 1
    let g:syntastic_check_on_wq = 0

    let g:syntastic_mode_map = { 'mode': 'passive' }
    let g:syntastic_ruby_exec = '/Users/latheesh.padukana/.rubies/ruby-2.1.3/bin/ruby'
    let g:syntastic_javascript_checkers = ['eslint']
    let g:syntastic_html_tidy_ignore_errors=["proprietary attribute \"ng-"]
" }}}

" Gundo - show undo tree {{{
    map <leader>u :GundoToggle<cr>
" }}}

" Unite {{{
    nnoremap [unite] <Nop>
    nmap <F2> [unite]
    nmap <Space> [unite]

    nnoremap <silent> [unite]<Space>   :<C-u>Unite -buffer-name=files buffer file_rec/async:! tag/file neomru/file bookmark session session/new file/new directory/new<CR>
    nnoremap <silent> [unite]<F2>      :<C-u>Unite -buffer-name=files buffer file_rec/async:! tag/file neomru/file bookmark session session/new file/new directory/new<CR>
    nnoremap <silent> [unite]<Tab>     :<C-u>Unite -buffer-name=menu menu<CR>

    nnoremap <silent> [unite]s         :<C-u>Unite source<CR>
    nnoremap <silent> [unite]/         :<C-u>Unite -buffer-name=lines line<CR>
    nnoremap <silent> [unite]:         :<C-u>Unite -buffer-name=output output<CR>
    nnoremap <silent> [unite]t         :<C-u>Unite -buffer-name=tags tag<CR>
    nnoremap <silent> [unite]g         :<C-u>Unite -buffer-name=grep grep:.<CR>
    nnoremap <silent> [unite]r         :<C-u>Unite -buffer-name=registers register<CR>
    nnoremap <silent> [unite]o         :<C-u>Unite -buffer-name=outline outline<CR>
    nnoremap <silent> [unite]y         :<C-u>Unite -buffer-name=yanks history/yank<CR>
    nnoremap <silent> [unite]c         :<C-u>Unite -buffer-name=commands command<CR>
    nnoremap <silent> [unite]h         :<C-u>Unite -buffer-name=help help<CR>
    nnoremap <silent> [unite]x         :<C-u>Unite -buffer-name=launcher launcher<CR>
    nnoremap <silent> [unite]q         :<C-u>Unite -buffer-name=quickfix quickfix<CR>
    nnoremap <silent> [unite]l         :<C-u>Unite -buffer-name=location location_list<CR>
    nnoremap <silent> [unite]ma        :<C-u>Unite -buffer-name=keymap mapping<CR>
    nnoremap <silent> [unite]me        :<C-u>Unite -buffer-name=messages output:message<CR>
    nnoremap <silent> [unite]R         :<C-u>Unite -buffer-name=resume resume<CR>

    nmap <F1> [unite]h

    " nnoremap <silent> [unite]fs        :<C-u>Unite -buffer-name=files -no-split jump_point file_point buffer_tab file_rec:! file file/new<CR>
    " nnoremap <silent> [unite]fd        :<C-u>UniteWithCurrentDir -buffer-name=files buffer bookmark file<CR>
    " nnoremap <silent> [unite]fb        :<C-u>UniteWithBufferDir -buffer-name=files buffer bookmark file<CR>
    " nnoremap <silent> [unite]R         :<C-u>Unite -buffer-name=resume resume<CR>

    let g:unite_enable_auto_select = 0

    call unite#custom#profile('default', 'context', { 'prompt': '> ' })
    " { ''winheight': 10, start_insert': 1 })

    autocmd FileType unite call s:unite_my_settings()
    function! s:unite_my_settings()
        imap <buffer> jj      <Plug>(unite_insert_leave)
        imap <buffer> <C-w>   <Plug>(unite_delete_backward_path)

        imap <buffer><expr> j unite#smart_map('j', '')
        imap <buffer> <TAB>   <Plug>(unite_select_next_line)
        imap <buffer> <C-w>   <Plug>(unite_delete_backward_path)
        imap <buffer> '       <Plug>(unite_quick_match_default_action)
        nmap <buffer> '       <Plug>(unite_quick_match_default_action)
        imap <buffer><expr> x unite#smart_map('x', "\<Plug>(unite_quick_match_jump)")
        nmap <buffer> x       <Plug>(unite_quick_match_jump)
        nmap <buffer> <C-z>   <Plug>(unite_toggle_transpose_window)
        imap <buffer> <C-z>   <Plug>(unite_toggle_transpose_window)
        nmap <buffer> <C-j>   <Plug>(unite_toggle_auto_preview)
        nmap <buffer> <C-r>   <Plug>(unite_narrowing_input_history)
        imap <buffer> <C-r>   <Plug>(unite_narrowing_input_history)
    endfunction

    let g:unite_source_menu_menus = {}

    let g:unite_source_menu_menus.filters = {
        \'description' : 'Text filters',
        \'command_candidates' : [
        \  ["Remove empty lines"           , 'v/./d'],
        \  ["Remove empty lines  [v]"      , "'<,'>v/./d"],
        \  ['Condense empty lines'         , '%s/\n\{3,}/\r\r/e'],
        \  ['Remove trailing white space'  , '%s/\s\+$//' ],
        \]}

    let g:unite_source_menu_menus.git = {
        \ 'description' : 'Git commands (Fugitive)',
        \ 'command_candidates' : [
        \  ['git status   - Fugitive', 'Gstatus'],
        \  ['git diff     - Fugitive', 'Gdiff'],
        \  ['git commit   - Fugitive', 'Gcommit'],
        \  ['git log      - Fugitive', 'exe "silent Glog | Unite quickfix"'],
        \  ['git blame    - Fugitive', 'Gblame'],
        \  ['git stage    - Fugitive', 'Gwrite'],
        \  ['git checkout - Fugitive', 'Gread'],
        \  ['git rm       - Fugitive', 'Gremove'],
        \  ['git mv       - Fugitive', 'exe "Gmove " input("destino: ")'],
        \  ['git push     - Fugitive', 'Git! push'],
        \  ['git pull     - Fugitive', 'Git! pull'],
        \  ['git prompt   - Fugitive', 'exe "Git! " input("comando git: ")'],
        \  ['git cd       - Fugitive', 'Gcd'],
        \]
        \}
" }}}

" vim: sw=4 ts=4 sts=4 et foldlevel=1 foldmethod=marker

